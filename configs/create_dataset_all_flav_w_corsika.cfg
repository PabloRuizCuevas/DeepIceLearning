[Basics]

# low energy von 100 GeV-5 TeV, medium von 5 TeV-100 PeV

MC_path0 = /data/ana/Cscd/StartingEvents/NuGen_new/NuTau/high_energy/IC86_flasher_p1=0.3_p2=0.0/l2  #/1
MC_path1 = /data/ana/Cscd/StartingEvents/NuGen_new/NuTau/medium_energy/IC86_flasher_p1=0.3_p2=0.0/l2  #/1

thisfolder = /data/user/pruiz/DeepIceLearning
geometry_file = /cvmfs/icecube.opensciencegrid.org/data/GCD/GeoCalibDetectorStatus_2013.56429_V0.i3.gz
icetray_path = /data/user/tglauch/Software/combo/build/env-shell.sh
python_env = /data/user/pruiz/DeepIceLearning/python_env/bin/activate
tray_script = /data/user/pruiz/DeepIceLearning/icetrays/nu_corsika_combined.py

out_folder = /data/user/pruiz/trainings_data
dagman_folder = /scratch/pruiz/test
logger_path = /scratch/pruiz/test/log/
input_shape = auto

PulseSeriesMap = InIceDSTPulses

Waveforms = InIceRawData

## give a comma seperated list of foldes in MC_path to be processed, if 'allinmcpath' use all folders
folder_list = allinmcpath

## give a comma seperated list of files to search for in subfolders of MC_path. If 'allinfolder' use all files.
### use standart unix syntax for using files matching a special regular expression, e.g. *numu*
file_list = allinfolder


### use name charges (=pulses) times and widths (pulse width) to define input slices
[Input_Charges]     ##here you write the features to compute for each dom
charge = np.sum(charges)
first_charge = charges[0]
charge_last = charges[-1]
num_pulses = len(charges)
charge_10ns = charge_after_time(charges, times, t=10)
charge_50ns = charge_after_time(charges, times, t=50)
charge_100ns = charge_after_time(charges, times, t=100)
charge_500ns = charge_after_time(charges, times, t=500)
mult=mult(charges,times)              ####mine
diff=diff(charges,times)
mean=mean(charges,times)
var=var(charges,times)

[Input_Times]
time_first = np.amin(times)
time_last = np.amax(times)
time_spread = np.amax(times)-np.amin(times)
time_std = np.std(times)
time_weighted_median = median(times, charges)


[Input_Pulses]
ignore = False
quantiles = 0.01, 0.03, 0.05, 0.08, 0.11, 0.15, 0.2, 0.5 , 0.8

[Input_Waveforms1]
ignore = True

[Cuts]
# maximum energy of events [GeV]
#max_energy_cut = OFF
#max_energy_cutoff = 100000000


[Variables]  ##here you write the features to compute for each frame
linefit_zenith = ['LineFit'].dir.zenith
linefit_azimuth = ['LineFit'].dir.azimuth
linefit_x = ['LineFit'].dir.x
linefit_y = ['LineFit'].dir.y
linefit_z = ['LineFit'].dir.z
smpe_zenith =  ['OnlineL2_SplineMPE'].dir.zenith
smpe_azimuth =  ['OnlineL2_SplineMPE'].dir.azimuth
smpe_x =  ['OnlineL2_SplineMPE'].dir.x
smpe_y =  ['OnlineL2_SplineMPE'].dir.y
smpe_z =  ['OnlineL2_SplineMPE'].dir.z
ev_id = ['I3EventHeader'].event_id
run_id = ['I3EventHeader'].run_id
true_zen = ['primary_nu'].dir.zenith
true_az = ['primary_nu'].dir.azimuth
true_x = ['primary_nu'].dir.x
true_y = ['primary_nu'].dir.y
true_z = ['primary_nu'].dir.z
true_E = ['primary_nu'].energy
IC_hitDOMs = ['IC_hit_doms'].value
DC_hitDOMs = ['DC_hit_doms'].value
multiplicity = ['multiplicity'].value
inelasticity = ['inelasticity'].value
interaction_x = ['first_interaction_pos'].pos.x
interaction_y = ['first_interaction_pos'].pos.y
interaction_z = ['first_interaction_pos'].pos.z
classification = ['classification'].value
signature = ['signature'].value
inter_type = ['I3MCWeightDict']['InteractionType']
p_int = ['I3MCWeightDict']['TotalWeight']
p_type = ['I3MCWeightDict']['PrimaryNeutrinoType']
ow = ['I3MCWeightDict']['OneWeight'].real
n_events = ['I3MCWeightDict']['NEvents']
track_dir_x = ['visible_track'].dir.x
track_dir_y = ['visible_track'].dir.y
track_dir_z = ['visible_track'].dir.z
track_zenith = ['visible_track'].dir.zenith
track_azimuth = ['visible_track'].dir.azimuth
E_dep = ['depE'].value
trunc_e = ['OnlineL2_SplineMPE_TruncatedEnergy_AllBINS_Muon'].energy
mu_ex = ['OnlineL2_SplineMPE_MuEx'].energy
track_length =['track_length'].value
cascade_filter = ['QFilterMask']['CascadeFilter_13'].condition_passed
cascade_filter_prescale = ['QFilterMask']['CascadeFilter_13'].prescale_passed
muon_filter = ['QFilterMask']['MuonFilter_13'].condition_passed
muon_filter_prescale = ['QFilterMask']['MuonFilter_13'].prescale_passed
onlinel2_filter = ['QFilterMask']['OnlineL2Filter_17'].condition_passed
onlinel2_filter_prescale = ['QFilterMask']['OnlineL2Filter_17'].prescale_passed
min_bias_filter = ['QFilterMask']['FilterMinBias_13'].condition_passed
min_bias_filter_prescale = ['QFilterMask']['FilterMinBias_13'].prescale_passed
mese_filter = ['QFilterMask']['MESEFilter_15'].condition_passed
mese_filter_prescale = ['QFilterMask']['MESEFilter_15'].prescale_passed
cascade_filter12 = ['QFilterMask']['CascadeFilter_12'].condition_passed
cascade_filter12_prescale = ['QFilterMask']['CascadeFilter_12'].prescale_passed
muon_filter12 = ['QFilterMask']['MuonFilter_12'].condition_passed
muon_filter12_prescale = ['QFilterMask']['MuonFilter_12'].prescale_passed
min_bias_filter12 = ['QFilterMask']['FilterMinBias_12'].condition_passed
min_bias_filter12_prescale = ['QFilterMask']['FilterMinBias_12'].prescale_passed
weight = ['corsika_weight'].value
mc_prim_zen = ['MCPrimary'].dir.zenith
mc_prim_az = ['MCPrimary'].dir.azimuth
mc_prim_x = ['MCPrimary'].dir.x
mc_prim_y = ['MCPrimary'].dir.y
mc_prim_z = ['MCPrimary'].dir.z
mc_prim_E = ['MCPrimary'].energy
mc_prim_type = ['MCPrimary'].pdg_encoding

[Functions]
