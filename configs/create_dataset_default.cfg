[Basics]
# low energy von 100 GeV-5 TeV, medium von 5 TeV-100 PeV
MC_path0 = /data/ana/Cscd/StartingEvents/NuGen_new/NuE/medium_energy/IC86_flasher_p1=0.3_p2=0.0/l2
MC_path1 = /data/ana/Cscd/StartingEvents/NuGen_new/NuMu/medium_energy/IC86_flasher_p1=0.3_p2=0.0/l2
MC_path2 = /data/ana/Cscd/StartingEvents/NuGen_new/NuTau/medium_energy/IC86_flasher_p1=0.3_p2=0.0/l2

thisfolder = /data/user/tglauch/DeepIceLearning

geometry_file = /cvmfs/icecube.opensciencegrid.org/data/GCD/GeoCalibDetectorStatus_2013.56429_V0.i3.gz

out_folder = /data/user/tglauch/DL_output/data/third_set/run02

dagman_folder = /data/user/tglauch/DL_output/data/third_set/run02/dagman

logger_path = /data/user/tglauch/DL_output/data/third_set/run02

input_shape = auto

PulseSeriesMap = InIceDSTPulses

Waveforms = InIceRawData

## give a comma seperated list of foldes in MC_path to be processed, if 'allinmcpath' use all folders
folder_list = allinmcpath  

## give a comma seperated list of files to search for in subfolders of MC_path. If 'allinfolder' use all files.
### use standart unix syntax for using files matching a special regular expression, e.g. *numu*
file_list = allinfolder


### use name charges (=pulses) times and widths (pulse width) to define input slices
[Input_Charges]
charge = np.sum(charges)
first_charge = charges[0]
num_pulses = len(charges)


[Input_Times]
time_first = np.amin(times) 
time_spread = np.amax(times)-np.amin(times)
av_time_charges =average(charges, 1./widths)
time_kurtosis = skew(times)
time_moment_2 = moment(times, moment=2)

[Input_Waveforms1]
ignore = True
quantiles =  0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95
step_size = 0.25
type = ATWD

[Input_Pulses]
ignore = False
step_size_pulses = 0.25


[Cuts]
#set a specific cut on ON to apply it
# only events with a neutrino as primary
only_neutrino_as_primary_cut = OFF

# maximum energy of events [GeV]
max_energy_cut = OFF
max_energy_cutoff = 100000000

# minmal energy of events [GeV]
min_energy_cut = OFF
min_energy_cutoff = 100

# minimal energy requierment for taus [GeV]
minimal_tau_energy_cut = OFF
minimal_tau_energy = 200000

# minimal amount of hit DOMs
min_hit_DOMs_cut = OFF
min_hit_DOMs = 9

[Scale_Class]
0 = 3
1 = 1
2 = 3
3 = 6
5 = 30

### Define Input Variables Below, Reco Quantities
[depositedE]
function = calc_depositedE(_icframe_)
out_type = float64

[IC_hitDOMs]
function = calc_hitDOMs(_icframe_, which="IC")
out_type = float64

[DC_hitDOMs]
function = calc_hitDOMs(_icframe_, which="DC")
out_type = float64

[ow]
variable = ['I3MCWeightDict']['OneWeight'].real
out_type = float64

[firstParticle]
variable = ['I3MCTree'][0].pdg_encoding
out_type = float64

[energyFirstParticle]
variable = ['I3MCTree'][0].energy
out_type = float64

[zenith]
variable = ["LineFit"].dir.zenith
out_type = float64

[RunID]
variable = ['I3EventHeader'].run_id
out_type = float64

[EventID]
variable = ['I3EventHeader'].event_id
out_type = float64

[TauDecayLength]
function = tau_decay_length(_icframe_)
out_type = float64

[ClassificationLabel]
function = classify(_icframe_)
out_type = float64

[StartingLabel]
function = starting(_icframe_)
out_type = float64

[MinBias_Filter]
variable = ["FilterMask"]["FilterMinBias_13"].condition_passed
out_type = float64

[Cascade_Filter]
variable = ["FilterMask"]["CascadeFilter_13"].condition_passed
out_type = float64

[Muon_Filter]
variable = ["FilterMask"]["MuonFilter_13"].condition_passed
out_type = float64

[vert_x]
function = get_vertex(_icframe_, which='x')
out_type = float64  

[vert_y]
function = get_vertex(_icframe_, which='y')
out_type = float64

[vert_z]
function = get_vertex(_icframe_, which='z')
out_type = float64

[dir_x]
function = get_dir(_icframe_, which='x')
out_type = float64  

[dir_y]
function = get_dir(_icframe_, which='y')
out_type = float64 

[dir_z]
function = get_dir(_icframe_, which='z')
out_type = float64 

[inelasticity]
function = get_inelasticity(_icframe_)
out_type = float64 
